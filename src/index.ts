const rules = new Map<string, RegExp>([
  ['999', /^\d{3}$/],
  ['AAA', /^(\d)\1{2}$/],
  ['ABC', /^(012|123|234|345|456|567|678|789)$/],
  ['ABB', /^(\d)(?!\1)(\d)\2$/],
  ['ABA', /^(\d)(?!\1)(\d)\1$/],
  ['AAB', /^(\d)\1(?!\1)(\d)$/],

  ['360-degree', /^([0-2]\d{2}|3[0-5]\d|360)¬∞$/],

  ['0x999', /^0x\d{3}$/],
  ['999jp', /^[Èõ∂Â£±ÂºêÂèÇËÇÜ‰ºçÈô∏ÊºÜÊçåÁéñ]{3}$/],
  ['999cn', /^[Èõ∂‰∏Ä‰∫å‰∏âÂõõ‰∫îÂÖ≠‰∏ÉÂÖ´‰πù]{3}$/],
  ['arabic999', /^[Ÿ†Ÿ° Ÿ¢Ÿ£Ÿ§Ÿ•Ÿ¶ŸßŸ®Ÿ©]{3}$/],

  // should support all flag
  ['flag999', /^(üá∫üá∏|üá®üá≥|üá∫üá≥|üá¶üá™|üá®üá¶|üá∞üá∑|üá´üá∑|üáØüáµ|üáßüá∑|üá©üá™)\d{3}$/],

  ['10K', /^\d{4}$/],
  ['ABCD', /^(0123|1234|2345|3456|4567|5678|6789)$/],
  ['AAAA', /^(\d)\1{3}$/],
  ['ABBB', /^(\d)(?!\1)(\d)\2\2$/],
  ['AABB', /^(\d)\1(?!\1)(\d)\2$/],
  ['AAAB', /^(\d)\1\1(?!\1)(\d)$/],
  ['ABAA', /^(\d)(?!\1)(\d)\1\1$/],
  ['AABA', /^(\d)\1(?!\1)(\d)\1$/],
  ['ABBA', /^(\d)(?!\1)(\d)\2\1$/],
  ['ABAB', /^(\d)(?!\1)(\d)\1\2$/],
  ['AABC', /^(\d)\1(?!\1)(\d)(?!\1)(?!\2)(\d)$/],
  ['ABCC', /^(\d)(?!\1)(\d)(?!\1)(?!\2)(\d)\3$/],
  ['ABBC', /^(\d)(?!\1)(\d)\2(?!\1)(?!\2)(\d)$/],

  ['0XXX', /^0\d{3}$/],
  ['00XX', /^0{2}\d{2}$/],
  ['0X0X', /^0\d0\d$/],
  ['0X0X', /^0\d0\d$/],
  ['0XX0', /^0\d{2}0$/],
  ['XX00', /^\d{2}0{2}$/],
  ['X0X0', /^\d0\d0$/],
  ['XX88', /^\d{2}8{2}$/],
  ['XX69', /^\d{2}69$/],

  [
    'MMDD',
    /^((02([0-2][1-9]))|(((04)|(06)|(11))((0[1-9])|([12][0-9])|(30)))|(((01)|(03)|(05)|(07)|(08)|(10)|(12))((0[1-9])|([12][0-9])|(30)|(31))))$/,
  ],

  ['0x10K', /^0x\d{4}$/],
  ['arabic10K', /^[Ÿ†Ÿ° Ÿ¢Ÿ£Ÿ§Ÿ•Ÿ¶ŸßŸ®Ÿ©]{4}$/],

  ['100K', /^\d{5}$/],
  ['AAAAA', /^(\d)\1{4}$/],
  ['ABCDE', /^(01234|12345|23456|34567|45678|56789)$/],
  ['ABBBB', /^(\d)(?!\1)(\d)\2{3}$/],
  ['AABBB', /^(\d)\1(?!\1)(\d)\2{2}$/],
  ['AAABB', /^(\d)\1{2}(?!\1)(\d)\2$/],
  ['AAAAB', /^(\d)\1{3}(?!\1)(\d)$/],
  ['ABBBA', /^(\d)(?!\1)(\d)\2{2}\1$/],
  ['ABAAA', /^(\d)(?!\1)(\d)\1{3}$/],
  ['AABAA', /^(\d)\1(?!\1)(\d)\1{2}$/],
  ['AAABA', /^(\d)\1{2}(?!\1)(\d)\1$/],
  ['ABABA', /^(\d)(?!\1)(\d)\1\2\1$/],
  ['XABCD', /^\d(0123|1234|2345|3456|4567|5678|6789)$/],
  ['XX000', /^\d{2}0{3}$/],
  ['00XX0', /^00\d{2}0$/],
  ['000XX', /^0{3}\d{2}$/],
  ['XX420', /^\d{2}420$/],

  ['AAABC', /^(\d)\1{2}(?!\1)(\d)(?!\1)(?!\2)(\d)$/],
  ['AABBC', /^(\d)\1(?!\1)(\d)\2(?!\1)(?!\2)(\d)$/],
  ['AABCC', /^(\d)\1(?!\1)(\d)(?!\1)(?!\2)(\d)\3$/],
  ['ABCCC', /^(\d)(?!\1)(\d)(?!\1)(?!\2)(\d)\3{2}$/],
  ['ABBCC', /^(\d)(?!\1)(\d)\2(?!\1)(?!\2)(\d)\3$/],
  ['ABBBC', /^(\d)(?!\1)(\d)\2{2}(?!\1)(?!\2)(\d)$/],
  ['ABCBA', /^(\d)(?!\1)(\d)(?!\1)(?!\2)(\d)\2\1$/],

  ['XXX69', /^\d{3}69$/],
  ['69XXX', /^69\d{3}$/],
  ['00XXX', /^0{2}\d{3}$/],
  ['XXX00', /^\d{3}0{2}$/],

  ['AAAAAA', /^(\d)\1{5}$/],
  ['ABBBBB', /^(\d)(?!\1)(\d)\2{4}$/],
  ['AABBBB', /^(\d)\1(?!\1)(\d)\2{3}$/],
  ['AAABBB', /^(\d)\1{2}(?!\1)(\d)\2{2}$/],
  ['AAAABB', /^(\d)\1{3}(?!\1)(\d)\2$/],
  ['ABBABB', /^(\d)\1{3}(?!\1)(\d)\2$/],
  ['ABBABB', /^(\d)(?!\1)(\d)\2\1\2{2}$/],
  ['ABABAB', /^(\d)(?!\1)(\d)\1\2\1\2$/],
  ['00XX00', /^0{2}\d{2}0{2}$/],
  ['AABBCC', /^(\d)\1(?!\1)(\d)\2(?!\1)(?!\2)(\d)\3$/],
  ['ABBBBBC', /^(\d)(?!\1)(\d)\2{3}(?!\1)(?!\2)(\d)$/],
  ['AAAABC', /^(\d)\1{3}(?!\1)(\d)(?!\1)(?!\2)(\d)$/],
  ['ABCABC', /^(\d)(?!\1)(\d)(?!\1)(?!\2)(\d)\1\2\3$/],
  ['XXX420', /^\d{3}420$/],
  ['420XXX', /^420\d{3}$/],
  ['XXX000', /^\d{3}0{3}$/],
  ['000XXX', /^0{3}\d{3}$/],
  ['a-share-code', /^[06][0-9]{5}$/],
  ['XXXX69', /^\d{4}69$/],

  ['AAABBBB', /^(\d)\1{2}(?!\1)(\d)\2{3}$/],
  ['AAAABBBB', /^(\d)\1{3}(?!\1)(\d)\2{3}$/],
  ['ABBCBBA', /^(\d)(?!\1)(\d)\2(?!\1)(?!\2)(\d)\2{2}\1$/],

  ['wan-club', /^[1-9]\d{0,2}0{4}$/],
  [
    'XXXAAAAAAAA',
    /^1(3[0-9]|4[57]|5[0-35-9]|66|7[235678]|18[0-9]|19[1589])(\d)\2{7}$/,
  ],

  ['0x9', /^0x\d$/],
  ['0x99', /^0x\d{2}$/],
  ['0x999', /^0x\d{3}$/],
  ['0x10K', /^0x\d{4}$/],
  ['1-hex', /^0x[0-9a-f]$/],
  ['2-hex', /^0x[0-9a-f]{2}$/],
  ['3-hex', /^0x[0-9a-f]{3}$/],
]);

const TIMES_TABLE = 'times-table';

function isTimesTable(value = '') {
  const table: string[] = [];
  for (let i = 1; i <= 9; i++) {
    for (let j = 1; j <= i; j++) {
      const result = i * j;
      const prefix = result < 10 ? '0' : '';
      table.push(`${j}${i}${prefix}${result}`);
    }
  }

  return table.includes(value);
}

export function detectPatterns(name = ''): Set<string> {
  const patterns = new Set<string>();

  if (!name.endsWith('.bit')) return patterns;

  const value = name.replace(/\.bit$/, '');

  // times-table doesn't use regex
  if (isTimesTable(value)) patterns.add(TIMES_TABLE);

  for (const rule of rules) {
    if (rule[1].test(value)) patterns.add(rule[0]);
  }

  return patterns;
}
